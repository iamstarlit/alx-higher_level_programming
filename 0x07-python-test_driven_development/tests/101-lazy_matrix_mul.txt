101-lazy_matrix_mul.txt
===========================================================
This is a test file to test `lazy_matrix_mul(m_a, m_b)
function in `101-lazy_matrix_mul` module.

`lazy_matrix_mul` multiplies two matrices
using `numpy` module.
___________________________________________________________


Importing module.
-----------------

::
    >>> matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul


Testing valid inputs to `lazy_matrix_mul(m_a, m_b)`.
----------------------------------------------------

::
    # Multiplying 2 by 2 matrices
    >>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])
    array([[ 7, 10],
     	   [15, 22]])

    # Multiplying single matrix by 2 by 2 matrix
    >>> matrix_mul([[1, 2]], [[3, 4], [5, 6]])
    array([[13, 16]])

    # Multiplying 3 by 3 matrices
    >>> list1 = [[1, 4, 7], [2, 5, 8], [3, 6, 9]]
    >>> list2 = [[1, -1, 2], [2, -1, 2], [3, -3, 0]]
    >>> matrix_mul(list1, list2)
    array([[ 30, -26,  10],
           [ 36, -31,  14],
           [ 42, -36,  18]])

    # Multiplying single matrices
    >>> matrix_mul([[1, 5, 7]], [[3], [5], [8]])
    array([[84]])

    # Passing a tuple as a matrix
    >>> matrix_mul((1, 3, 5), [[1.3], [5.2], [7.7]]) # doctest: +ELLIPSIS
    array([55.4])



Testing invalid inputs to `lazy_matrix_mul(m_a, m_b)`
----------------------------------------------------

::
    # Passing None as a matrix
    >>> matrix_mul(None, None) # doctest: +ELLIPSIS
    Traceback (most recent call last):
        ...
    ValueError: ...

    # Passing None as a matrix
    >>> matrix_mul([[7, 12]], None) # doctest: +ELLIPSIS
    Traceback (most recent call last):
        ...
    ValueError: ...

    # Passing a string as a matrix
    >>> matrix_mul([[3, 3], [4, 4]], "TIRED") # doctest: +ELLIPSIS
    Traceback (most recent call last):
    	      ...
    numpy.core._exceptions._UFuncNoLoopError: ...

    # Passing a list of tuples
    >>> matrix_mul([(1, 5, 10)], [(1), (5)]) # doctest: +ELLIPSIS
    Traceback (most recent call last):
        ...
    ValueError: ...

    # Passing a list of string
    >>> matrix_mul([[]], ["IT'S 00:16 NOW"]) # doctest: +ELLIPSIS
    Traceback (most recent call last):
        ...
    numpy.core._exceptions._UFuncNoLoopError: ...

    # Passing an empty matrix
    >>> matrix_mul([], [[1]]) # doctest: +ELLIPSIS
    Traceback (most recent call last):
        ...
    ValueError: ...

    # Passing an empty matrix 2
    >>> matrix_mul([[1, 2]], [[]]) # doctest: +ELLIPSIS
    Traceback (most recent call last):
        ...
    ValueError: ...

    # Passing a matrix with a list of strings
    >>> matrix_mul([[1, '1', 1], ['2', 2, '2']], [[3], [3]])
    ... # doctest: +ELLIPSIS
    Traceback (most recent call last):
        ...
    numpy.core._exceptions._UFuncNoLoopError: ...

    # Passing a matrix with a list of strings 2
    >>> matrix_mul([[2, 4, 6], [3, 6, 9]], [[1], ['2'], [3]])
    ... # doctest: +ELLIPSIS
    Traceback (most recent call last):
        ...
    numpy.core._exceptions._UFuncNoLoopError: ...

    # Passing a matrix with an empty list
    >>> matrix_mul([[12, 12, 12], [], [14, 14, 14]], [[2], [3], [8]])
    ... # doctest: +ELLIPSIS
    Traceback (most recent call last):
        ...
    ValueError: ...

    # Passing a matrix which its rows have different size
    >>> matrix_mul([[2, 2, 2], [4, 4, 4]], [[2], [3, 3]])
    ... # doctest: +ELLIPSIS
    Traceback (most recent call last):
        ...
    ValueError: ...

    # Passing two matrix that can't be multiplied
    >>> matrix_mul([[5, 2, 3], [7, 13, 2], [1, 0, 3]], [[2, 3], [6, 9]])
    ... # doctest: +ELLIPSIS
    Traceback (most recent call last):
        ...
    ValueError: ...

    # Missing one argument
    >>> matrix_mul([[1, 2]]) # doctest: +ELLIPSIS
    Traceback (most recent call last):
        ...
    TypeError: lazy_matrix_mul() missing 1 required positional argument: 'm_b'

    # Missing arguments
    >>> matrix_mul() # doctest: +ELLIPSIS
    Traceback (most recent call last):
        ...
    TypeError: lazy_matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'
